#case1 Enum.filter(fn x -> x + 2 == 0 end)
{{:., [], [{:__aliases__, [alias: false], [:Enum]}, :filter]}, [],
 [
   {:fn, [],
    [
      {:->, [],
       [
         [{:x, [], Elixir}],
         {:==, [context: Elixir, import: Kernel],
          [{:+, [context: Elixir, import: Kernel], [{:x, [], Elixir}, 2]}, 0]}
       ]}
    ]}
 ]}

#case2 Enum.filter(& &1+2 == 0)
{{:., [], [{:__aliases__, [alias: false], [:Enum]}, :filter]}, [],
 [
   {:&, [],
    [
      {:==, [context: Elixir, import: Kernel],
       [{:+, [context: Elixir, import: Kernel], [{:&, [], [1]}, 2]}, 0]}
    ]}
 ]}

#caseA Enum.filter(arithmatics ,comp, arithmatics)
cf:list |>Enum.filter(fn x -> rem(x,2) == rem(x,3) end)
{{:., [], [{:__aliases__, [alias: false], [:Enum]}, :filter]}, [],
 [
   {:fn, [],
    [
      {:->, [],
       [
         [{:x, [], Elixir}],
         {:==, [context: Elixir, import: Kernel],
          [
            {:rem, [context: Elixir, import: Kernel], [{:x, [], Elixir}, 2]},
            {:rem, [context: Elixir, import: Kernel], [{:x, [], Elixir}, 3]}
          ]}
       ]}
    ]}
 ]}

#caseB Enum.filter(arithmatic_compare == bolean)
cf:list |>Enum.filter(fn x -> (rem(x,2) == rem(x,3)) == false end)